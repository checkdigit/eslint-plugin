import { StatusCodes } from 'http-status-codes';

/** =============================================================
 *  Legacy service warpper typings from serve-runtime/fixture
 *  ============================================================= */
type Headers = Record<string, string>;

interface FullResponseOptions {
  resolveWithFullResponse: true;
  headers?: Headers;
}

interface BodyResponseOptions {
  resolveWithFullResponse: false;
  headers?: Headers;
}

interface FullResponse<T = object> {
  headers: Headers;
  status: (typeof StatusCodes)[keyof typeof StatusCodes];
  statusCode: (typeof StatusCodes)[keyof typeof StatusCodes];
  body?: T;
}

interface EndpointFunction<T = unknown> {
  (uri: string, options?: BodyResponseOptions): Promise<T>;
  (uri: string, options?: FullResponseOptions): Promise<FullResponse<T>>;
}

interface EndpointFunctionWithRequestBody<T = unknown> {
  (uri: string, json?: object, options?: BodyResponseOptions): Promise<T>;
  (uri: string, json?: object, options?: FullResponseOptions): Promise<FullResponse<T>>;
}

export interface Endpoint {
  head: EndpointFunction;
  get: EndpointFunction;
  del: EndpointFunction;
  patch: EndpointFunctionWithRequestBody;
  put: EndpointFunctionWithRequestBody;
  post: EndpointFunctionWithRequestBody;
}

/** =============================================================
 *  New service warpper typings generated by openapi-cli
 *  ============================================================= */

type FunctionFromRecord<T> = <K extends keyof T>(parameter: K) => T[K];

type MappedResponseHeaders<HeadersType> = undefined extends HeadersType
  ? {
      header: NonNullable<HeadersType>;
      headers: NonNullable<HeadersType>;
      get: FunctionFromRecord<NonNullable<HeadersType>>;
    }
  : {
      header: HeadersType;
      headers: HeadersType;
      get: FunctionFromRecord<HeadersType>;
    };

type MappedResponseBody<BodyType> = undefined extends BodyType
  ? {
      body: NonNullable<BodyType>;
    }
  : {
      body: BodyType;
    };

interface ApiResponseContext {
  status: number;
  body?: unknown;
  headers?: Record<string, string>;
}

type MappedResponse<ResponseContextUnion> = ResponseContextUnion extends infer ResponseContext
  ? ResponseContext extends ApiResponseContext
    ? {
        status: ResponseContext['status'];
        statusCode: ResponseContext['status'];
      } & MappedResponseHeaders<ResponseContext['headers']> &
        MappedResponseBody<ResponseContext['body']>
    : never
  : never;

type ResponseType<Context, IsFull> = Context extends { response: infer ResponseContext }
  ? IsFull extends true
    ? MappedResponse<ResponseContext>
    : Extract<ResponseContext, { body: any }>['body']
  : never;

type ContextType<FunctionTypes, MatchingUrl> = FunctionTypes extends [infer Head, ...infer Rest]
  ? Head extends { url: infer Url; context: infer Context }
    ? MatchingUrl extends Url
      ? Context
      : ContextType<Rest, MatchingUrl>
    : never
  : never;

// type BodyArgument<Context> = Context extends { request: { body: infer Body } }
//   ? [body: Body]
//   : Context extends { request: { body?: infer Body } }
//     ? [body?: Body]
//     : [body?: undefined];

// type ArgumentsWithBody<Context, IsFull> = [
//   ...BodyArgument<Context>,
//   options?: Context extends { request: { headers: infer Headers } }
//     ? { headers: Headers; resolveWithFullResponse: IsFull }
//     : Context extends { request: { headers?: infer Headers } }
//       ? { headers?: Headers; resolveWithFullResponse: IsFull }
//       : { headers?: Record<string, string>; resolveWithFullResponse: IsFull },
// ];

type ArgumentsWithoutBody<Context, IsFull> = [
  options?: Context extends { request: { headers: infer Headers } }
    ? { headers: Headers; resolveWithFullResponse: IsFull }
    : Context extends { request: { headers?: infer Headers } }
      ? { headers?: Headers; resolveWithFullResponse: IsFull }
      : { headers?: Record<string, string>; resolveWithFullResponse: IsFull },
];

interface InboundContext {
  get(key: string): string;
}

interface PingGetRequestType extends InboundContext {}
interface PingGetResponseDefault {
  status:
    | 100
    | 101
    | 102
    | 103
    | 201
    | 202
    | 203
    | 204
    | 205
    | 206
    | 207
    | 300
    | 301
    | 302
    | 303
    | 304
    | 305
    | 307
    | 308
    | 400
    | 401
    | 402
    | 403
    | 404
    | 405
    | 406
    | 407
    | 408
    | 409
    | 410
    | 411
    | 412
    | 413
    | 414
    | 415
    | 416
    | 417
    | 418
    | 419
    | 420
    | 421
    | 422
    | 423
    | 424
    | 426
    | 428
    | 429
    | 431
    | 451
    | 500
    | 501
    | 502
    | 503
    | 504
    | 505
    | 507
    | 511;
  body: /* Error message */ Error;
}

interface PingGetResponseOK {
  status: 200;
  body: {
    /**
     * Current server time
     */
    serverTime: string; // date-time
  };
}

export type PingGetResponseContext = PingGetResponseOK | PingGetResponseDefault;

export interface PingGetContext {
  request: PingGetRequestType;
  response: PingGetResponseContext;
}

type PingGet = {
  url: `/ping/v1/ping`;
  context: PingGetContext;
};

type GetFunctionTypes = [PingGet];
type GetUrl = GetFunctionTypes[number]['url'];

export interface SampleApi {
  get<Url extends GetUrl, IsFull extends boolean = false, Context = ContextType<GetFunctionTypes, Url>>(
    url: Url,
    ...options: ArgumentsWithoutBody<Context, IsFull>
  ): Promise<ResponseType<Context, IsFull>>;
}
